## Stages
# 1. snyk_scan - Software Composition Analysis (SCA)
# 2. sonarcloud_scan - Static Application Security Testing (SAST)
# 3. docker build and push
# 4. trivy_scan - Container Security Scan
# 5. deploy (AWS EC2)
# 6. zap_scan - Dynamic Application Security Testing (DAST)
# 7. False Negative Test



name: Build, Test, and Deploy Frontend with Docker, AWS, SonarCloud, Snyk and Zap

on:
  push:
    branches:
      - main

jobs:
  SCA_snyk_scan:
    name: Run Snyk SCA Scan for Vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Specify your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  SAST_sonarcloud_scan:
    name: Run SonarCloud SAST Scan
    needs: SCA_snyk_scan
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install SonarScanner
        run: npm install -g sonar-scanner

      - name: Run SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Store your SonarCloud token in GitHub Secrets
          SONAR_HOST_URL: "https://sonarcloud.io" # SonarCloud URL
        run: |
          sonar-scanner \
            -Dsonar.projectKey=rohitsoni1209_trythat-Frontend-rohit \
            -Dsonar.organization=rohitsoni1209 \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -X

  docker_build_and_push:
    name: Build and Push Docker Image for Frontend
    needs: SAST_sonarcloud_scan
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Build Docker Image for Frontend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: Rohit:Soni@2004

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest

  Container_trivy_scan:
    name: Run Trivy Security Scan on Docker Image
    needs: docker_build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Pull the built Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy Frontend Application to EC2
    needs: Container_trivy_scan
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH Key for EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa

      - name: SSH into EC2 and Deploy Frontend Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Update and install Docker on EC2 if not installed
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -aG docker ec2-user

            # Log in to Docker Hub
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            # Pull the latest Frontend image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest

            # Remove old container if it exists
            sudo docker stop trythat-frontend-rohit || true
            sudo docker rm trythat-frontend-rohit || true

            # Run the Frontend Docker container
            sudo docker run -d -p 80:80 --name trythat-frontend-rohit ${{ secrets.DOCKER_USERNAME }}/trythat-frontend-rohit:latest

            # Optionally remove unused containers and images
            sudo docker system prune -f
          EOF

  DAST_zap_scan:
    name: Scan the Web Application with ZAP
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.ZAP_PAT }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://43.204.114.112/' # Replace with your deployed frontend URL
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
